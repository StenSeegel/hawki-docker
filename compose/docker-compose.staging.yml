# =====================================================
# HAWKI - Staging Docker Compose Configuration
# =====================================================
# Staging environment with:
# - Code baked into Docker image (no live mounting)
# - Debug mode enabled for testing
# - No Adminer (production-like)
# - Write access to cache/storage directories
# =====================================================

services:
    # ====================================================
    # Application Container (PHP-FPM) - STAGING
    # ====================================================
    app:
        container_name: ${PROJECT_NAME}-app
        image: ${PROJECT_HAWKI_IMAGE}
        build:
            context: ..
            dockerfile: Dockerfile
            target: app_staging  # Use staging target - code in image + debug capabilities
            args:
                DOCKER_UID: ${DOCKER_UID:-33}
                DOCKER_GID: ${DOCKER_GID:-33}
                HTTP_PROXY: ${DOCKER_HTTP_PROXY:-}
                HTTPS_PROXY: ${DOCKER_HTTPS_PROXY:-}
                NO_PROXY: ${DOCKER_NO_PROXY:-localhost,127.0.0.1}
                # Vite build args for frontend
                VITE_APP_NAME: ${APP_NAME:-HAWKI2}
                VITE_REVERB_APP_KEY: ${REVERB_APP_KEY}
                VITE_REVERB_HOST: ${VITE_REVERB_HOST}
                VITE_REVERB_PORT: ${REVERB_PORT:-443}
                VITE_REVERB_SCHEME: ${REVERB_SCHEME:-https}
        restart: unless-stopped
        volumes:
            # NO code mount - code is in the image
            # Only mount external files/directories
            - ./env/.env:/var/www/html/.env:ro
            # Mount entire storage directory from host (simpler, no volume conflicts)
            - ./storage:/var/www/html/storage
            # Mount public first, then override build subdirectory
            - staging_public:/var/www/html/public
            - staging_build:/var/www/html/public/build
            # Mount config files
            - ./config/model_providers.php:/var/www/html/config/model_providers.php:ro
            - ./config/model_lists:/var/www/html/config/model_lists:ro
        healthcheck:
            test: cgi-fcgi -bind -connect 127.0.0.1:9000 || exit 1
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        env_file:
            - ./env/.env
        environment:
            REVERB_HOST: ${APP_URL}
        depends_on:
            mysql:
                condition: service_healthy
                
    # ====================================================
    # Queue Worker - STAGING
    # ====================================================
    queue:
        container_name: ${PROJECT_NAME}-queue
        image: ${PROJECT_HAWKI_IMAGE}
        restart: always
        volumes:
            - ./env/.env:/var/www/html/.env:ro
            - ./storage:/var/www/html/storage
            - ./config/model_providers.php:/var/www/html/config/model_providers.php:ro
        env_file:
            - ./env/.env
        environment:
            REVERB_HOST: reverb
            REVERB_PORT: 8080
            REVERB_SCHEME: http
        command: [ 'php', 'artisan', 'queue:work', '--queue=default,mails,message_broadcast', '--tries=3', '--timeout=90' ]
        depends_on:
            mysql:
                condition: service_healthy
                
    # ====================================================
    # Laravel Reverb (WebSocket Server) - STAGING
    # ====================================================
    reverb:
        container_name: ${PROJECT_NAME}-reverb
        image: ${PROJECT_HAWKI_IMAGE}
        restart: always
        volumes:
            - ./env/.env:/var/www/html/.env:ro
            - ./storage:/var/www/html/storage
            - ./config/model_providers.php:/var/www/html/config/model_providers.php:ro
        env_file:
            - ./env/.env
        command: [ 'php', 'artisan', 'reverb:start' ]
        depends_on:
            mysql:
                condition: service_healthy
                
    # ====================================================
    # Task Scheduler - STAGING
    # ====================================================
    scheduler:
        container_name: ${PROJECT_NAME}-scheduler
        image: ${PROJECT_HAWKI_IMAGE}
        restart: always
        volumes:
            - ./env/.env:/var/www/html/.env:ro
            - ./storage:/var/www/html/storage
            - ./config/model_providers.php:/var/www/html/config/model_providers.php:ro
        env_file:
            - ./env/.env
        command: [ 'php', 'artisan', 'schedule:work' ]
        depends_on:
            mysql:
                condition: service_healthy
            
    # ====================================================
    # Nginx Web Server - STAGING
    # ====================================================
    nginx:
        container_name: ${PROJECT_NAME}-nginx
        # Use the app image so nginx has access to public/ files
        # nginx-alpine is only used for the nginx binary
        image: nginx:1.27-alpine
        restart: always
        volumes:
            - ./certs:/etc/nginx/certs
            - ./nginx/nginx.default.conf:/etc/nginx/nginx.conf:ro
            # Mount storage from host for uploads (read-only for nginx)
            - ./storage/app/public:/var/www/html/storage:ro
            # Share build assets with app container
            - staging_build:/var/www/html/public/build:ro
            # Mount the rest of public/ from a shared volume with app
            - staging_public:/var/www/html/public:ro
        ports:
            - ${DOCKER_PROJECT_IP:-0.0.0.0}:80:80
            - ${DOCKER_PROJECT_IP:-0.0.0.0}:443:443
        depends_on:
            - app
        healthcheck:
            test: curl --fail http://localhost || exit 1
            interval: 10s
            timeout: 3s
            retries: 3
            start_period: 10s
            
    # ====================================================
    # File Converter Service
    # ====================================================
    file-converter:
        image: digitalenvironments/hawki-toolkit-file-converter:1.0.0
        container_name: ${PROJECT_NAME}-file-converter
        platform: linux/amd64
        restart: always
        env_file:
            - ./env/.env
        environment:
            - F_API_KEY=${HAWKI_FILE_CONVERTER_API_KEY:-}
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8001/" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
            
    # ====================================================
    # Redis Cache
    # ====================================================
    redis:
        container_name: ${PROJECT_NAME}-redis
        image: redis:latest
        restart: always
        env_file:
            - ./env/.env
        volumes:
            - redis_data:/root/redis
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
            REDIS_PORT: ${REDIS_PORT:-6379}
            REDIS_DATABASES: 16
            
    # ====================================================
    # MySQL Database
    # ====================================================
    mysql:
        container_name: ${PROJECT_NAME}-mysql
        image: mysql:8.0
        command:
            - --default-authentication-plugin=mysql_native_password
            - --max_connections=2000
        env_file:
            - ./env/.env
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
            MYSQL_DATABASE: ${DB_DATABASE:-hawki}
            MYSQL_USER: ${DB_USERNAME:-hawki}
            MYSQL_PASSWORD: ${DB_PASSWORD:-password}
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        restart: unless-stopped
        volumes:
            - mysql_data:/var/lib/mysql
        ports:
            - ${DOCKER_PROJECT_IP:-127.0.0.1}:${DB_EXTERNAL_PORT:-3307}:3306
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME:-hawki}", "-p${DB_PASSWORD:-password}"]
            start_period: 10s
            timeout: 20s
            interval: 5s
            retries: 10

# ====================================================
# Volumes
# ====================================================
volumes:
    mysql_data:
        driver: local
    redis_data:
        driver: local
    staging_build:
        driver: local
    staging_public:
        driver: local


